Q3. Inversion count in an array

Problem Description
Given an array of integers A. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. Find the total number of inversions of A modulo (109 + 7).



Problem Constraints
1 <= length of the array <= 105

1 <= A[i] <= 109



Input Format
The only argument given is the integer array A.



Output Format
Return the number of inversions of A modulo (109 + 7).



Example Input
Input 1:

A = [1, 3, 2]
Input 2:

A = [3, 4, 1, 2]


Example Output
Output 1:

1
Output 2:

4


Example Explanation
Explanation 1:

The pair (1, 2) is an inversion as 1 < 2 and A[1] > A[2]
Explanation 2:

The pair (0, 2) is an inversion as 0 < 2 and A[0] > A[2]
The pair (0, 3) is an inversion as 0 < 3 and A[0] > A[3]
The pair (1, 2) is an inversion as 1 < 2 and A[1] > A[2]
The pair (1, 3) is an inversion as 1 < 3 and A[1] > A[3]


CODE: (JAVA)

public class Solution {
    long count = 0;
    public int solve(int[] A) {
        countMerge(A, 0, A.length-1);
        return (int)count;
    }
    public void countMerge(int[] A, int s, int e){
        if(s==e) return;
        int m = (s+e)/2;
        countMerge(A, s, m);
        countMerge(A, m+1, e);
        sortedMerge(A, s, m, m+1, e);
    }
    public void sortedMerge(int[] A, int p1, int n, int p2, int m){
        int size = m-p1+1;
        int start = p1;
        int[] C = new int[size];
        int p3 = 0;
        while(p1<=n && p2<=m){
            if(A[p1] > A[p2]){
                C[p3] = A[p2];
                p2++;
                p3++;
                count = (count + n - p1 + 1)%1000000007;
            }
            else{
                C[p3] = A[p1];
                p3++;
                p1++;
            }
        }
        while(p1<=n){
            C[p3]=A[p1];
            p1++;
            p3++;
        }
        while(p2<=m){
            C[p3]=A[p2];
            p3++;
            p2++;
        }
        for(int i=0; i<size; i++){
            A[start+i] = C[i];
        }
    }
}