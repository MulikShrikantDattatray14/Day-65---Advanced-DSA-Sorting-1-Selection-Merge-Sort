Q4. Reverse pairs

Problem Description
Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
Return the number of important reverse pairs in the given array A.



Problem Constraints
1 <= length of the array <= 10^5

-2 * 10^9 <= A[i] <= 2 * 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the number of important reverse pairs in the given array A.



Example Input
Input 1:

 A = [1, 3, 2, 3, 1]
Input 2:

 A = [4, 1, 2]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 There are two pairs which are important reverse i.e (3, 1) and (3, 1).
Explanation 2:

 There is only one pair i.e (4, 1).



CODE: (JAVA)

public class Solution {
    int reversePair = 0;

    public int solve(int[] A) {
        int n = A.length;
        mergeSort(A,0,n-1);
        return reversePair;
    }
    //merge sort function to split the array into individual elements
    public void mergeSort(int[] A, int s, int e){
        if(s >= e) return;
        int mid = (s+e)/2;
        mergeSort(A,s,mid);
        mergeSort(A,mid+1,e);
        merge(A,s,mid,e);
    }

    //main merge function
    public void merge(int[] A, int s, int mid, int e){
        int n1 = mid - s + 1; //number of elements in array1
        int n2 = e - mid;//number of elements in array2
        int A1[] = new int[n1];
        int A2[] = new int[n2];
        int index = 0;

        //filling A1 and A2
        for(int i = s; i <= mid; i++)
            A1[index++] = A[i];

        index = 0;
        for(int i = mid+1; i <= e; i++)
            A2[index++] = A[i];
       
        int i = 0, j = 0; // i and j referncing A1 and A2 array respectively

        //checking A[i] > 2*A[j] remember merge didnot happened yet
        while(i < n1 && j < n2){
            if((long)A1[i] > 2 * (long)A2[j]){ //handle overflow
                reversePair =  reversePair + (n1-i);
                j++;
            }
            else
                i++;
        }

        //merging A1 and A2 in sorted manner

        i = 0; j = 0; // i and j referncing A1 and A2 array respectively
        index = s; // important because using the original input array

        while(i < n1 && j < n2){
            if(A1[i] < A2[j]){ // equals to condition for equal elements
                A[index++] = A1[i++];
            }
            else{
                A[index++] = A2[j++];
            }
        }
        //if some elements still remaining after traversal
       
            while(i < n1){
                A[index++] = A1[i++];
            }
       
            while(j < n2){
                A[index++] = A2[j++];
            }
        
    }
}
