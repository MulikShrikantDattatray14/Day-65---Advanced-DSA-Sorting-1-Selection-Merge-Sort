Q4. Reverse pairs

Problem Description
Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
Return the number of important reverse pairs in the given array A.



Problem Constraints
1 <= length of the array <= 10^5

-2 * 10^9 <= A[i] <= 2 * 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the number of important reverse pairs in the given array A.



Example Input
Input 1:

 A = [1, 3, 2, 3, 1]
Input 2:

 A = [4, 1, 2]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 There are two pairs which are important reverse i.e (3, 1) and (3, 1).
Explanation 2:

 There is only one pair i.e (4, 1).



CODE: (JAVA)

public class Solution {
    public int cnt;
    public int solve(int[] A) {
        cnt=0 ;
        int n=A.length ;
        mergeSort(A,0,n-1) ;
        return cnt;
    }

    public  void mergeSort(int ar[],int s,int e){
        if(s==e)
            return ;
        int m=(s+e)/2 ;
        mergeSort(ar,s,m) ;
        mergeSort(ar,m+1,e) ;
        int l=s,le=m,r=m+1,re=e;
        double x,y ;
        while(l<=le && r<=re){
            x=ar[l];
            y=ar[r];
            if(x/2 >y){
                cnt+=le-l+1;
                r++;
            }
            else
                l++;
        }
        int temp[]=new int [e-s+1];
        int p1=s,p2=m+1,p3=0;
        while(p1<=m && p2<=e){
            if(ar[p1]<ar[p2]){
                temp[p3]=ar[p1];
                p1++;
                p3++;
            }
            else{
                temp[p3]=ar[p2];
                p2++;
                p3++;
            }
        }
        while(p1<=m){
            temp[p3]=ar[p1];
            p1++;
            p3++;
        }
        while(p2<=e){
            temp[p3]=ar[p2];
            p2++;
            p3++;
        }

        for(int i=0;i<e-s+1;i++){
            ar[s+i]=temp[i] ;
        }
    }
}